{"ast":null,"code":"var _jsxFileName = \"/Users/zenghyun/Desktop/frontend/udemy/react/06-Effect-Reducers-Context/src/components/Login/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useReducer, useContext } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport Input from '../UI/input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n  return {\n    value: '',\n    isValid: false\n  };\n}; // reducer 함수가 Login 컴포넌트 함수 범위 바깥에서 만들어진 이유는 리듀서 함수 내부에서는 Login 함수 내부에서 만들어진 어떤 데이터도 필요하지 않기 때문이다.\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n  return {\n    value: '',\n    isValid: false\n  };\n};\nconst Login = props => {\n  _s();\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: null\n  });\n  const [passwordState, dispatchPasword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: null\n  });\n  const authContext = useContext(AuthContext);\n  const {\n    isValid: emailIsValid\n  } = emailState; // 객체 디스트럭쳐링 별칭 할당\n  const {\n    isValid: passwordIsValid\n  } = passwordState; // 별칭 할당\n\n  useEffect(() => {\n    // enteredEmail, enteredPassword 입력 값이 바뀔 때마다 매번 실행\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(emailIsValid && passwordIsValid); // isValid 값이 true이면 더이상 유효성 검사를 실행하지 않음 \n    }, 500);\n    return () => {\n      clearTimeout(identifier); // 이전에 timer를 지우고 마지막 timer만 동작시킴\n      console.log('clean up');\n    }; // cleanup function\n  }, [emailIsValid, passwordIsValid]);\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n    // setFormIsValid(\n    //   emailState.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    dispatchPasword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    });\n\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6 \n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n    // setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPasword({\n      type: 'INPUT_BLUR'\n    });\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    authContext.onLogin(emailState.value, passwordState.value);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"0eklqXZx2xatYVzz3ru9E1DTJss=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","Input","jsxDEV","_jsxDEV","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","_s","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPasword","authContext","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","className","login","children","onSubmit","id","label","onChange","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","actions","btn","disabled","_c","$RefreshReg$"],"sources":["/Users/zenghyun/Desktop/frontend/udemy/react/06-Effect-Reducers-Context/src/components/Login/Login.js"],"sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../../store/auth-context';\nimport Input from '../UI/input/Input';\n\nconst emailReducer = (state, action) => {\n  if(action.type === 'USER_INPUT'){\n    return {value:action.val, isValid:action.val.includes('@')};\n  }\n  if(action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.includes('@')};\n  }\n  return {value: '', isValid: false };\n}; // reducer 함수가 Login 컴포넌트 함수 범위 바깥에서 만들어진 이유는 리듀서 함수 내부에서는 Login 함수 내부에서 만들어진 어떤 데이터도 필요하지 않기 때문이다.\n\nconst passwordReducer = (state, action) => {\n  if(action.type === 'USER_INPUT'){\n    return {value:action.val, isValid:action.val.trim().length > 6 };\n  }\n  if(action.type === 'INPUT_BLUR') {\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return {value: '', isValid: false };\n}\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {value:'', isValid: null});\n  const [passwordState, dispatchPasword] = useReducer(passwordReducer, {value:'', isValid: null});\n \n  const authContext = useContext(AuthContext);\n\n  const { isValid: emailIsValid } = emailState; // 객체 디스트럭쳐링 별칭 할당\n  const { isValid: passwordIsValid } = passwordState; // 별칭 할당\n\n  useEffect(() => { // enteredEmail, enteredPassword 입력 값이 바뀔 때마다 매번 실행\n   const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(\n        emailIsValid && passwordIsValid\n      ); // isValid 값이 true이면 더이상 유효성 검사를 실행하지 않음 \n    }, 500);\n  \n    return () => {\n      clearTimeout(identifier);  // 이전에 timer를 지우고 마지막 timer만 동작시킴\n      console.log('clean up');\n        }; // cleanup function\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n    // setFormIsValid(\n    //   emailState.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    dispatchPasword({type: 'USER_INPUT', val: event.target.value});\n\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6 \n    // );\n  };\n\n  const validateEmailHandler = () => {\n    dispatchEmail({type: 'INPUT_BLUR'});\n    // setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    dispatchPasword({type: 'INPUT_BLUR'});\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    authContext.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <Input \n        id=\"email\" \n        label=\"E-mail\" \n        type=\"email\" \n        isValid={emailIsValid} \n        value={emailState.value} \n        onChange={emailChangeHandler} \n        onBlur={validateEmailHandler}\n        />\n         <Input \n        id=\"password\" \n        label=\"Password\" \n        type=\"password\" \n        isValid={passwordIsValid} \n        value={passwordState.value} \n        onChange={passwordChangeHandler} \n        onBlur={validatePasswordHandler}\n        />\n     \n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}