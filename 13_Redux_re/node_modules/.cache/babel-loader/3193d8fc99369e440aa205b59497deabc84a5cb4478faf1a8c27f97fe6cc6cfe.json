{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"INCREMENT\":\n//       return {\n//         counter: state.counter + 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"INCREASE\":\n//       return {\n//         counter: state.counter + action.amount,\n//         showCounter: state.showCounter,\n//       };\n//     case \"DECREMENT\":\n//       return {\n//         counter: state.counter - 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"TOGGLE\":\n//       return {\n//           counter: state.counter,\n//           showCounter: !state.showCounter,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const {\n  increment,\n  decrement,\n  increase,\n  toggleCounter\n} = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","actions"],"sources":["/Users/zenghyun/Desktop/frontend/study/react/13_Redux_re/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = { counter: 0, showCounter: true };\n\n const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        increment(state) {\n            state.counter++; \n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    } \n});\n\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"INCREMENT\":\n//       return {\n//         counter: state.counter + 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"INCREASE\":\n//       return {\n//         counter: state.counter + action.amount,\n//         showCounter: state.showCounter,\n//       };\n//     case \"DECREMENT\":\n//       return {\n//         counter: state.counter - 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"TOGGLE\":\n//       return {\n//           counter: state.counter,\n//           showCounter: !state.showCounter,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nconst store = configureStore({\n  reducer: counterSlice.reducer,\n});\n\nexport const {increment, decrement, increase, toggleCounter} = counterSlice.actions;\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAErD,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC9BK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMW,KAAK,GAAGf,cAAc,CAAC;EAC3BgB,OAAO,EAAEX,YAAY,CAACW;AACxB,CAAC,CAAC;AAEF,OAAO,MAAM;EAACR,SAAS;EAAEE,SAAS;EAAEC,QAAQ;EAAEG;AAAa,CAAC,GAAGT,YAAY,CAACY,OAAO;AAEnF,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}