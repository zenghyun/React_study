{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"INCREMENT\":\n//       return {\n//         counter: state.counter + 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"INCREASE\":\n//       return {\n//         counter: state.counter + action.amount,\n//         showCounter: state.showCounter,\n//       };\n//     case \"DECREMENT\":\n//       return {\n//         counter: state.counter - 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"TOGGLE\":\n//       return {\n//           counter: state.counter,\n//           showCounter: !state.showCounter,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const {\n  increment,\n  decrement,\n  increase,\n  toggleCounter\n} = counterSlice.actions;\nexport const {\n  login,\n  logout\n} = authSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","actions"],"sources":["/Users/zenghyun/Desktop/frontend/study/react/13_Redux_re/src/store/index.js"],"sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = { counter: 0, showCounter: true };\n\n const counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++; \n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    } \n});\n\n// const counterReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case \"INCREMENT\":\n//       return {\n//         counter: state.counter + 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"INCREASE\":\n//       return {\n//         counter: state.counter + action.amount,\n//         showCounter: state.showCounter,\n//       };\n//     case \"DECREMENT\":\n//       return {\n//         counter: state.counter - 1,\n//         showCounter: state.showCounter,\n//       };\n//     case \"TOGGLE\":\n//       return {\n//           counter: state.counter,\n//           showCounter: !state.showCounter,\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n\nconst initialAuthState = {\n    isAuthenticated: false\n};\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState:initialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n\nconst store = configureStore({\n  reducer: {\n      counter: counterSlice.reducer,\n      auth: authSlice.reducer\n}\n    \n});\n\nexport const {increment, decrement, increase, toggleCounter} = counterSlice.actions;\nexport const {login, logout} = authSlice.actions;\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAE5D,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC9BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMY,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC1BK,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAACS,gBAAgB;EAC7BR,QAAQ,EAAE;IACNW,KAAKA,CAACT,KAAK,EAAE;MACTA,KAAK,CAACO,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAE;MACVA,KAAK,CAACO,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;AAGF,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EAC3BsB,OAAO,EAAE;IACLnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAC7BC,IAAI,EAAEL,SAAS,CAACI;EACtB;AAEA,CAAC,CAAC;AAEF,OAAO,MAAM;EAACb,SAAS;EAAEE,SAAS;EAAEC,QAAQ;EAAEG;AAAa,CAAC,GAAGV,YAAY,CAACmB,OAAO;AACnF,OAAO,MAAM;EAACL,KAAK;EAAEC;AAAM,CAAC,GAAGF,SAAS,CAACM,OAAO;AAChD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}